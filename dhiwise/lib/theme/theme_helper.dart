import 'dart:ui';
import 'package:flutter/material.dart';
import '../../core/app_export.dart';

/// Helper class for managing themes and colors.
class ThemeHelper {
  // The current app theme
  var _appTheme = PrefUtils().getThemeData();

// A map of custom color themes supported by the app
  Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      scaffoldBackgroundColor: colorScheme.onPrimary.withOpacity(1),
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(24.h),
          ),
          shadowColor: colorScheme.primary.withOpacity(0.15),
          elevation: 4,
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      outlinedButtonTheme: OutlinedButtonThemeData(
        style: OutlinedButton.styleFrom(
          backgroundColor: Colors.transparent,
          side: BorderSide(
            color: appTheme.blueGray50,
            width: 1.h,
          ),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(23.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      checkboxTheme: CheckboxThemeData(
        fillColor: MaterialStateColor.resolveWith((states) {
          if (states.contains(MaterialState.selected)) {
            return colorScheme.primary;
          }
          return colorScheme.onSurface;
        }),
        side: BorderSide(
          width: 1,
        ),
        visualDensity: const VisualDensity(
          vertical: -4,
          horizontal: -4,
        ),
      ),
      dividerTheme: DividerThemeData(
        thickness: 1,
        space: 1,
        color: appTheme.blueGray50,
      ),
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
        bodyLarge: TextStyle(
          color: appTheme.gray500,
          fontSize: 16.fSize,
          fontFamily: 'Averta',
          fontWeight: FontWeight.w400,
        ),
        bodyMedium: TextStyle(
          color: appTheme.gray90001,
          fontSize: 13.fSize,
          fontFamily: 'Averta',
          fontWeight: FontWeight.w400,
        ),
        bodySmall: TextStyle(
          color: appTheme.gray700,
          fontSize: 12.fSize,
          fontFamily: 'Averta',
          fontWeight: FontWeight.w400,
        ),
        labelLarge: TextStyle(
          color: appTheme.gray90001,
          fontSize: 13.fSize,
          fontFamily: 'Averta',
          fontWeight: FontWeight.w700,
        ),
        labelMedium: TextStyle(
          color: Color(0XFFDE2227),
          fontSize: 11.fSize,
          fontFamily: 'Averta',
          fontWeight: FontWeight.w700,
        ),
        titleMedium: TextStyle(
          color: appTheme.gray90001,
          fontSize: 16.fSize,
          fontFamily: 'Averta',
          fontWeight: FontWeight.w700,
        ),
        titleSmall: TextStyle(
          color: appTheme.gray90001,
          fontSize: 14.fSize,
          fontFamily: 'Averta',
          fontWeight: FontWeight.w700,
        ),
      );
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static final primaryColorScheme = ColorScheme.light(
    // Primary colors
    primary: Color(0XFF21409A),
    primaryContainer: Color(0XFFFEE100),
    secondaryContainer: Color(0X07283F7C),

    // Error colors
    errorContainer: Color(0XFFDE2227),

    // On colors(text colors)
    onPrimary: Color(0XE5FFFFFF),
    onPrimaryContainer: Color(0X7F162B75),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  // Black
  Color get black900 => Color(0XFF000000);

  // Blue
  Color get blue100 => Color(0XFFB2C6FF);
  Color get blue50 => Color(0XFFEEF2FF);
  Color get blue60026 => Color(0X26247BE5);
  Color get blue800 => Color(0XFF2552D7);
  Color get blue900 => Color(0XFF1941B6);
  Color get blue90001 => Color(0XFF1641C1);
  Color get blue90002 => Color(0XFF1642C2);
  Color get blueA700 => Color(0XFF0866FF);

  // BlueGray
  Color get blueGray50 => Color(0XFFF1F1F1);

  // Cyan
  Color get cyan50 => Color(0XFFEAFFF7);
  Color get cyanA400 => Color(0XFF00EFFF);

  // Gray
  Color get gray100 => Color(0XFFF5F5F5);
  Color get gray10001 => Color(0XFFEDFDFC);
  Color get gray200 => Color(0XFFE8E8E8);
  Color get gray50 => Color(0XFFFAFAFA);
  Color get gray500 => Color(0XFFA0A0A0);
  Color get gray5001 => Color(0XFFF5F9FF);
  Color get gray5002 => Color(0XFFF9FDFF);
  Color get gray5003 => Color(0XFFF8FDFF);
  Color get gray700 => Color(0XFF686868);
  Color get gray900 => Color(0XFF141212);
  Color get gray90001 => Color(0XFF121113);
  Color get gray90002 => Color(0XFF1F1F1F);

  // Green
  Color get greenA700 => Color(0XFF13C670);

  // Indigo
  Color get indigo800 => Color(0XFF224099);
  Color get indigo80001 => Color(0XFF273E7C);
  Color get indigoA700 => Color(0XFF2255EC);
  Color get indigoA70001 => Color(0XFF2254EB);

  // LightBluef
  Color get lightBlue5007f => Color(0X7F049BF6);

  // LightBlue
  Color get lightBlue60000 => Color(0X00059BD7);
  Color get lightBlueA700 => Color(0XFF049AF5);

  // LightBluec
  Color get lightBlue6004c => Color(0X4C049CD9);

  // Red
  Color get red700 => Color(0XFFE5121F);

  // Teal
  Color get teal300 => Color(0XFF53CD9F);

  // White
  Color get whiteA700 => Color(0XFFFEFEFE);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
